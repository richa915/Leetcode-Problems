class Solution {
public:
    int strStr(string haystack, string needle){
        
        if(needle.size()==0) return 0;
        
        //Using stl
        auto it = search(haystack.begin(), haystack.end(),needle.begin(),needle.end());
        if(it==haystack.end()) return -1;
        
        return it - haystack.begin();        
    }
    
    
    
//     USING 2 POINTER APPROACH - TLE
//     int strStr(string haystack, string needle){
        
//         if(needle.size()==0) return 0;
        
//         int j=0;
//         for(int i=0; i<haystack.size(); i++){
//             if(haystack[i]==needle[j]) j++;
//             else i=i-j, j=0;
//             if(j==needle.size()) return i-j+1;
//         }
        
//         return -1;
//     }
      
    
    
//     BRUTE FORCE APPROACH - TLE
//     int strStr(string haystack, string needle) {
        
//         if(haystack.size()==0){
//             if(needle.size()==0) return 0;
//             else return -1;
//         }
//         if(needle.size()==0) return 0;
//         if(needle.size()>haystack.size()) return -1;
        
//         int index = -1, flag = 0;
//         for(int i=0; i<haystack.size(); i++){
            
//             if(haystack[i]==needle[0]){
//                 index = i;
//                 int j = 1 , k = i+1;
//                 while(j<needle.size() && k<haystack.size()){
//                     if(haystack[k]==needle[j]){
//                         j++; 
//                         k++;
//                     }
//                     else break;
//                 }
//                 if(j==needle.size()) return index;
//             }
            
//         }
        
//         return -1;
//     }
    
};
